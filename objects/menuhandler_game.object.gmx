<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>cursor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-666</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    var curcur=cursor;
    var face=face_human;
    var mousex;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
        var tmp = round(random(3));
        var nextdelay = 15+round(random(45));
        global.facestate = 3;
            alarm[tmp]=nextdelay; 

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
        var tmp = round(random(3));
        var nextdelay = 15+round(random(45));
        global.facestate = 2;
            alarm[tmp]=nextdelay;

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    global.facestate = 1;
    alarm[0]=15;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
        var tmp = round(random(3));
        var nextdelay=15+round(random(45));
        global.facestate = 0;
            alarm[tmp]=nextdelay;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    var mx = device_mouse_x_to_gui(0);
    var my = device_mouse_y_to_gui(0);

    enum screenbasex {
        start = 0,
        b0start = 7
    }

    enum screenbasey {
        start = 0,
        b0start = 15
    }

    curcur = cursor;
    cursor_sprite = blanks;
    //if megamode is off and screen is maxed...
    // displayport in this case is (7+)204 x (15+)160
    if(global.screenblocks==0) {
    
    var mofsx = mx - screenbasex.b0start;
    var mofsy = my - screenbasey.b0start;

    if(global.mouselook) {
        curcur = blanks;

        var winx = window_mouse_get_x();
        var winy = window_mouse_get_y();

        var cmx = window_get_width()/2;
        var cmy = window_get_height()/2;

        var change_x = winx - cmx;
        var change_y = winy - cmy;
        window_mouse_set(cmx, cmy);
        player.direction -= change_x/4;
        global.yaw -= round(change_y/4);
        
        if(global.yaw &lt; -45) {
            global.yaw = -45;
        }
        else if(global.yaw &gt; 45) {
            global.yaw = 45;
        }
    }

    else {
        //actual hud element interaction starts here
        if( mx &gt;= 17 &amp;&amp; my &gt;= 6 &amp;&amp; mx &lt;= 75 &amp;&amp; my &lt;= 9) {
            //inside hp bar
            if(mouse_check_button(mb_left)) {
                global.systemmsg = "health: "+string(global.hp)+" of "+string(global.hpmax)+" points.";
                if(!player.alarm[11]) player.alarm[11]=60*5;
            }
        }
        
        //actual hud element interaction stops here
    
        //if inside viewport at all
        if( (mofsx &gt; 0 &amp;&amp; mofsy &gt; 0 &amp;&amp; mofsx &lt; 204 &amp;&amp; mofsy &lt; 140) ) {
        
            //left column 1/3
            if(mofsx &lt; 68) {
                if(mofsy &lt; 53) {
                    curcur = cursor_1;
                    if(mouse_check_button(mb_left)) {
                        player.direction += 1;
                        if (player.speed &lt; 2) player.speed = min(2,player.speed+0.4);
                    }   //if mouse button held down
                }   //if in the top 1/3
                else if(mofsy &lt; 106) {
                    curcur = cursor_4;
                        if(mouse_check_button(mb_left)) {
                            player.direction += 1;
                        }   //if mouse button held down
                    }   //if in the center 1/3
                else if(mofsy &lt; 160) {
                curcur = cursor_7;
                /*
                     if(mouse_check_button(mb_left)) {
                        player.hspeed = lengthdir_x(2,player.direction+90);
                        player.vspeed = lengthdir_y(2,player.direction+90);
                     }
                */
                }   //if in the bottom 1/3
            }   //if in the left 1/3
            
            
            //center column 1/3
            else if(mofsx &lt; 136) {
                if(mofsy &lt; 53) {
                curcur = cursor_2;
                if(mouse_check_button(mb_left)) {
                        if (player.speed &lt; 3) player.speed = min(3,player.speed+0.4);
                    }   //if mouse button held down
                }   //if in the top 1/3
                else if(mofsy &lt; 106) {
                curcur = cursor_5;
                if(mouse_check_button(mb_left)) {
                        if (player.speed &lt; 2) player.speed = min(2,player.speed+0.4);
                    }   //if mouse button held down
                }   //if in the center 1/3
                else if(mofsy &lt; 160) {
                curcur = cursor_8;
                if(mouse_check_button(mb_left)) {
                        if (player.speed &gt; -2) player.speed = max(-2,player.speed-0.4);
                    }   //if mouse button held down
                }   //if in the bottom 1/3
            }   //if in the center 1/3

            //right column 1/3
            else if(mofsx &lt; 204) {
                if(mofsy &lt; 53) {
                curcur = cursor_3;
                if(mouse_check_button(mb_left)) {
                        player.direction -= 1;
                        if (player.speed &lt; 2) player.speed = min(2,player.speed+0.4);
                    }   //if mouse button held down
                }   //if in the top 1/3
            else if(mofsy &lt; 106) {
                curcur = cursor_6;
                if(mouse_check_button(mb_left)) {
                        player.direction -= 1;
                    }   //if mouse button held down
                }   //if in the center 1/3
            else if(mofsy &lt; 160) {
                curcur = cursor_9;
                /*
                    if(mouse_check_button(mb_left)) {
                        player.hspeed = lengthdir_x(2,player.direction-90);
                        player.vspeed = lengthdir_y(2,player.direction-90);
                     }
                */
                    //todo: handle strafing properly first
                }   //if in the bottom 1/3
            }   //if in the right 1/3

        }   //if inside viewport boundary
    }   //if global.screenblocks
}
    switch(global.playermorph) {
        case morph.human:
            face = face_human;
            break;
        case morph.cat:
            face = face_cat;
            break;
        case morph.caun:
            face = face_caun;
            break;
        case morph.opsis:
            face = face_opsis;
            break;
        case morph.frog:
            face = face_frog;
            break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    /*
    if(global.mapeditor &amp;&amp; global.copyvalue) {
        switch(global.mapeditmode) {
            default:
                break;
            case editmode.floors:
        }
    }
    */
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    if(global.gamerunning == false) {
        exit;
    }
    
    else {

    switch(global.zblock) {
        case 0:
            zgem = 142;
            break;
        case 1:
            zgem = 131;
            break;
        case 2:
            zgem = 120;
            break;
        case 3:
            zgem = 109;
            break;
        case 4:
            zgem = 97;
            break;
        case 5:
            zgem = 85;
            break;
        case 6:
            zgem = 73;
            break;
        case 7:
            zgem = 61;
            break;
        case 8:
            zgem = 49;
            break;
        case 9:
            zgem = 37;
            break;
        case 10:
            zgem = 25;
            break;
        case 11:
            zgem = 13;
            break;
        case 12:
            zgem = 1;
            break;
    }

    window_set_cursor(cr_none);
    display_set_gui_size(320,200);
    draw_background_stretched(black,0,0,320,200);

    if(global.screenblocks = 0) {
    
    d3d_set_lighting(false);

    draw_sprite(top,0,0,0);
    draw_sprite(bbar,0,0,167);
    draw_sprite(inven,0,224,0);
    draw_sprite(leftb,0,0,16);
    draw_sprite(rightb,0,216,16);
    draw_sprite(comm,0,0,156);
    
    draw_set_font(global.font);
    draw_set_color(c_white);
    draw_text(8,157,global.systemmsg);

    draw_set_halign(fa_right);
    draw_text(300,58,string(score));
    draw_set_halign(fa_left);
    
    draw_sprite_part(hpbar,0,0,0,(global.hp/global.hpmax)*58,3,17,6);
    draw_sprite_part(manabar,0,0,0,(global.mp/global.mpmax)*58,3,149,6);

    draw_surface_stretched_ext(global.rendersurface,8,16,208,140,c_white,255);
    surface_free(global.rendersurface);

    draw_sprite(face,global.facestate,248,1);


        draw_sprite(gem,0,1,zgem);
        draw_sprite(gem,0,218,zgem);
        
    if(R_LIGHTING_ENABLED) d3d_set_lighting(true);

    }

//////////////////////////////////////////////////////////////
    
    else if(global.screenblocks = 1) {

    draw_sprite(megcomm,0,0,189);
    draw_sprite(megaaltbar,0,248,0);
    draw_sprite(megamorph,0,257,0);
    
    //draw_sprite_part(redmegabar,0,0,0,58-(global.hp/global.hpmax),3,17,6);
    //draw_sprite_part(bluemegabar,0,0,0,58-(global.mp/global.mpmax),3,149,6);
    if(surface_exists(global.rendersurface)) {
    draw_surface_stretched(global.rendersurface,0,0,248,189);
    surface_free(global.rendersurface);
    }

        //draw_sprite(gem,0,1,1+(global.zblock*13 +6));
        //draw_sprite(gem,0,218,1+(global.zblock*13 +6));
    }

    draw_sprite(curcur,0,device_mouse_x_to_gui(0),device_mouse_y_to_gui(0));

    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="122">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug: item pickup hack
{
    global.systemmsg = "scepter of lord dildus";
    player.alarm[11]=60*3;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
