<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>_Dont_Place</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>collidable_primitive</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    //properties most Things should probably have
    
    //3d properties
    var z      = 0;
    var zspeed = 0;
    var height = 0;

    var sprite = _Dont_Place;
    var rstate = 0; //renderstate, for various effects to be implemented later
    var radius = 32;
    
    //camera coordinates of sprite
    var gx,gy,gz;
    var dx,dy,dz;

    //which cell are we in?
    var c      = 0;
    var cx     = 0;
    var cy     = 0;
    
    //combat properties (health, resistances, etc)
    var detect_distance = 0;    //in number of tiles
    
    var hp     = 1000;
    var hpmax  = 1000;
    
    var mp     = 1000;
    var mpmax  = 1000;
    
    var xp        = 0;
    var accuracy  = 0;
    var isfeared  = 0;  //monsters will run away when feared
    var isalerted = 0;  //are we inside detection range?

    dr[resist.NUMRESISTANCES] = 0;  //damage reductions (resistances)
    
    //pathfinding
    var canmove = 0;    //can this object move at all or is it static
    var movetargetdir=0;
    var target_x=0;
    var target_y=0;
    var gpspeed=0;
    
    var thingid=0;
    var collision=1;

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    c = P_ObjectInCell(self);

    //update the cell we're in
    cx = c%32;
    cy = c/32;
    
    if(hp &gt; hpmax) hp = hpmax;
    if(mp &gt; mpmax) mp = mpmax;
    
    if(hp &lt; (hpmax/10) ) isfeared = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    if(canmove) {
        var dist = distance_to_object(player);
        if(global.notarget) isalerted = 0;
        else isalerted = (dist &lt; detect_distance*64);
    }
    else exit;

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{

    //early out if static object of some kind
    if(!canmove) exit;
    
    //early out if not alerted
    if(!isalerted) exit;
    
    var dist = distance_to_object(player);
    
    if(dist &lt;= MELEE_RANGE) {
        motion_set(0,0);
        exit;
    }
    
    //if(x == target_x &amp;&amp; y == target_y) {

    var cx=0;
    var cy=0;   //this instance's cell coords

    var ctx=0;
    var cty=0;  //target cell to move to
    
    var tx=0;
    var ty=0;   //target real coords
    
    var px=0;
    var py=0;   //player cell coords
    
    var c = 0;  //temp value for P_ObjectInCell value

    if(dist &lt; 64) {
        tx = player.x;
        ty = player.y;
        move_towards_point(tx,ty,gpspeed);
        exit;
    }
    
    c = P_ObjectInCell(self);
    
        cx = c%32;
        cy = c/32;
    
    c = P_ObjectInCell(player);
    
        px = c%32;
        py = c/32;

            tx = (px*64) + 32;
            ty = (py*64) + 32;
        
        move_towards_point(tx,ty,gpspeed);

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="collidable_primitive">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{

   x = xprevious;
   y = yprevious;

   if (abs(hspeed) &gt;= abs(vspeed) &amp;&amp; not place_meeting(x+hspeed,y,collidable_primitive)) {
   x += hspeed;
   exit;
   }
   
   if (abs(vspeed) &gt;= abs(hspeed) &amp;&amp; not place_meeting(x,y+vspeed,collidable_primitive)) {
   y += vspeed;
   exit;
   }
   speed = 0;

} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{

    if(distance_to_object(player) &lt; 384) {
    
    gz = z+sprite_get_height(sprite);
    dz = z;
    
        //get camera coordinates of sprite
        gx = x-radius*global.camsin;
        gy = y-radius*global.camcos;
        
        dx = x+radius*global.camsin;
        dy = y+radius*global.camcos;

        d3d_draw_wall(gx,gy,gz,dx,dy,dz,sprite_get_texture(sprite,0),1,1);
        }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
