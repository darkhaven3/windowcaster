<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>_Dont_Place</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>collidable_primitive</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    //which sprite and subimage to draw as texture.
    var texture = BADFLAT;
    var x1,x2,y1,y2;
    
    //door variables
    var doordir=0;      //2 = east/west; 1 = north/south
    var doorlen=0;      //how far this door has moved in a particular direction (pixels)
    
    var isactive=0;
    var doorstate=0;    //1 = moving; 2 = is in open position; 3 = closing (?)

    //object z.
    var z=0;

    //walls have "infinite" height.
    var height = 65536;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///horizontal move
{
    if(doorstate == 1) {
        if(doorlen &lt; 60) {
            x++;
            x1++;
            x2++;
            doorlen++;
            alarm[3]=1;
        }
        else if(doorlen == 60) {
            doorstate = 2;
        }
    }
    
    else if(doorstate == 3) {
        if(doorlen &gt; 0) {
            x--;
            x1--;
            x2--;
            doorlen--;
            alarm[3]=1;
        }
        else if(doorlen == 0) {
            doorstate = 0;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///vertical move
{
    if(doorstate == 1) {
        if(doorlen &lt; 60) {
            y--;
            y1--;
            y2--;
            doorlen++;
            alarm[2]=1;
        }
        else if(doorlen == 60) {
            doorstate = 2;
        }
    }
    
    else if(doorstate == 3) {
    
        if(doorlen &gt; 0) {
            y++;
            y1++;
            y2++;
            doorlen--;
            alarm[2]=1;
        }
        else if(doorlen == 0) {
            doorstate = 0;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    if(doordir == 1) mask_index = vert_mask;
    else if(doordir == 2) mask_index = horiz_mask;
    doorstate = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    mask_index = blanks;
    doorstate = 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    if(distance_to_object(player) &lt; 512) {

        //get the current floor height of this cell.
        cell = P_ObjectInCell(self);
        z = 0;
        
        //calculate texture max z
        z1 = z+tz;
        z2 = z;
        
        //draw
        d3d_draw_wall(x1,y1,z1,x2,y2,z2,background_get_texture(texture),1,1);
        d3d_draw_wall(x2,y2,z1,x1,y1,z2,background_get_texture(texture),1,1);   //test: fix flipped textures
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
